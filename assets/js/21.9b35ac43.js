(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{423:function(e,n,t){"use strict";t.r(n);var a=t(2),s=Object(a.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("blockquote",[n("p",[e._v("实现功能：输入框失焦时调用接口校验输入内容")])]),e._v(" "),n("blockquote",[n("p",[e._v("出现问题：点击页面上其他地方触发失焦事件，因为失焦事件中的接口是异步调用，在接口调用完成前，点击事件先触发了")])]),e._v(" "),n("blockquote",[n("p",[e._v("解决方法：在调用接口前添加监听器，监听点击事件并阻止，接口调用完成后移除监听器")])]),e._v(" "),n("ol",[n("li",[e._v("阻止点击事件"),n("br"),e._v(" "),n("em",[e._v("common.js handler方法")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("//点击页面主要按钮之后禁止点击事件\nexport function handler(e) {\n  let event = e || window.event;\n  event.stopPropagation ? event.stopPropagation() : event.cancelBubble = true;//阻止冒泡\n  event.preventDefault ? event.preventDefault() : event.returnValue = false;//取消默认事件\n};\n")])])]),n("ol",{attrs:{start:"2"}},[n("li",[e._v("监听器添加与移除"),n("br"),e._v(" "),n("em",[e._v("引入common.js中的handler方法")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// onblur事件\n  findZwzh(event) {\n    const time = Date.now()\n    const sign = this.$buildPassInfo(time)\n    const params = {\n      time: time,\n      sign: sign\n    };    \n    // 添加监听器\n    document.body.addEventListener("click",handler,true);\n    // 调用接口\n    _findZwzh(params).then(res => {              \n      console.log("接口调用完成")\n      } \n      // 调用接口处理完成后移除监听器\n      document.body.removeEventListener("click",handler,true);\n    })\n  },\n')])])]),n("p",[n("em",[e._v("调用接口校验没问题的情况下，点击事件要点两次才能触发，移除监听器后点击事件不会立即触发")])])])}),[],!1,null,null,null);n.default=s.exports}}]);